generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// NO CHANGES to Article model - keeping your existing structure
model Article {
  id           String    @id @default(uuid()) @db.Uuid
  source_name  String?
  author       String?
  title        String
  description  String?
  urlToImage   String?
  url          String
  content      String?
  published_at DateTime?
  created_at   DateTime  @default(now())
  is_synced    Boolean   @default(false)
  synced_at    DateTime?
}

// NO CHANGES to ChatSession model - keeping your existing structure
model ChatSession {
  id         String        @id @default(uuid()) @db.Uuid
  session_id String        @unique
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  messages   ChatMessage[]

  @@map("chat_sessions")
}

// FIXED: Enhanced ChatMessage model with better duplicate prevention
model ChatMessage {
  id         String   @id @default(uuid()) @db.Uuid
  session_id String
  message_id String // Redis message ID
  type       String // user, assistant, system
  content    String
  sender     String
  timestamp  DateTime
  metadata   String?

  session ChatSession @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  // FIXED: This unique constraint prevents duplicate messages with the same ID in the same session
  @@unique([session_id, message_id], name: "session_message_unique")
  
  // ADDED: Index for better performance on session queries
  @@index([session_id, timestamp])
  
  @@map("chat_messages")
}