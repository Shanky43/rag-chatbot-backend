// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   // output   = "../generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("POSTGRES_URL")
// }

// model Article {
//   id           String    @id @default(uuid()) @db.Uuid
//   source_name  String?
//   author       String?
//   title        String
//   description  String?
//   urlToImage   String?
//   url          String
//   content      String?
//   published_at DateTime?
//   created_at   DateTime  @default(now())
//   is_synced    Boolean   @default(false)
//   synced_at    DateTime?
// }

// model ChatSession {
//   id         String        @id @default(uuid()) @db.Uuid
//   session_id String        @unique
//   created_at DateTime      @default(now())
//   updated_at DateTime      @updatedAt
//   messages   ChatMessage[]

//   @@map("chat_sessions")
// }

// model ChatMessage {
//   id         String      @id @default(uuid()) @db.Uuid
//   session_id String
//   message_id String // Redis message ID
//   type       String // user, assistant, system
//   content    String
//   sender     String
//   timestamp  DateTime
//   metadata   String? 
//   session    ChatSession @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

//   @@unique([session_id, message_id])
//   @@map("chat_messages")
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// NO CHANGES to Article model - keeping your existing structure
model Article {
  id           String    @id @default(uuid()) @db.Uuid
  source_name  String?
  author       String?
  title        String
  description  String?
  urlToImage   String?
  url          String
  content      String?
  published_at DateTime?
  created_at   DateTime  @default(now())
  is_synced    Boolean   @default(false)
  synced_at    DateTime?
}

// NO CHANGES to ChatSession model - keeping your existing structure
model ChatSession {
  id         String        @id @default(uuid()) @db.Uuid
  session_id String        @unique
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  messages   ChatMessage[]

  @@map("chat_sessions")
}

// ONLY CHANGE: Adding the unique constraint to prevent message duplication
model ChatMessage {
  id         String   @id @default(uuid()) @db.Uuid
  session_id String
  message_id String // Redis message ID
  type       String // user, assistant, system
  content    String
  sender     String
  timestamp  DateTime
  metadata   String?

  session ChatSession @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  // ADDED: This unique constraint prevents duplicate messages
  @@unique([session_id, message_id], name: "session_message_unique")
  @@map("chat_messages")
}
